-- [데이터 조작어 (DML, Data Manipulation Language)]
-- : 테이블 데이터를 조작하는 언어 (데이터 추가, 수정, 삭제)

-- 1) 데이터 추가 (INSERT문)
SELECT * FROM TAB;

-- 테이블이 있으면 삭제
DROP TABLE DEPT_TEMP;
DROP TABLE DEPT_TEMP2;

-- 테이블 생성
CREATE TABLE DEPT_TEMP
AS SELECT * FROM DEPT;

SELECT * FROM DEPT_TEMP;

/* 형식)
 * INSERT INTO 테이블 명 [(열1, 열2 ...)]
 * VALUES (열1에 들어갈 데이터, 열2에 들어갈 데이터 ...)
 * */

-- 부서번호 50, 부서이름 GOTT, 위치 SEOUL
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (50, 'GOTT', 'SEOUL');

SELECT * FROM DEPT_TEMP;

-- INSERT 오류
-- A. 열 개수 != 데이터 개수
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (60, 'GOTT2');

-- 이건 가능!
INSERT INTO DEPT_TEMP (DEPTNO, DNAME)
VALUES (60, 'GOTT2');

SELECT * FROM DEPT_TEMP;

-- B. 자료형 맞지 않은 경우
INSERT INTO DEPT_TEMP (DEPTNO, DNAME)
VALUES ('GOOD', 'GOTT2'); -- 암시적 형 변환 불가능

-- 이건 가능!
INSERT INTO DEPT_TEMP (DEPTNO, DNAME)
VALUES ('60', 'GOTT2'); -- 암시적 형 변환 가능

-- ECLIPSE에서 실행 X
-- DESC DEPT_TEMP; -- SQLPLUS 툴 X

-- C. 열에 대해 지정한 자릿수보다 큰 값을 넣는 경우
INSERT INTO DEPT_TEMP (DEPTNO, DNAME)
VALUES ('100', 'GOTT2'); -- DEPTNO (NUMBER(2))

-- TOAD FOR ORACLE (SQL + SQLPLUS)
-- DESC DEPT_TEMP; -- SQLPLUS 툴 O

-- EX)
-- 1)
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (100, 'DB', 'BUSAN', 'HI');
-- A. 열 개수 != 데이터 개수
-- B. DEPTNO => NUMBER(2): 3자리 숫자 올 수 없음

-- 2)
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES ('HI', 'DB', 'BUSAN');
-- A. DEPTNO = 'HI' (X)

-- 3)
INSERT INTO DEPT_TEMP (DEPTNO, DNAME)
VALUES (800, 'DB');
-- A. DEPTNO => NUMBER(2): 3자리 숫자 올 수 없음


-- 데이터가 확정되지 않았을 경우
-- 1)
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (70, 'WEB DEVELOP', NULL); 
-- 명시적 표현 (가독성)

-- 2)
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (70, 'WEB DEVELOP', '');

INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES ('', 'WEB DEVELOP', 'SEOUL');
-- 숫자형, 문자형, 데이트형 '' => NULL 대체 가능

-- 3)
INSERT INTO DEPT_TEMP (DEPTNO, DNAME)
VALUES (70, 'WEB DEVELOP');
-- 암시적 표현

-- 테이블 생성 (EMP_TEMP)
-- 테이블의 구조만 들고 오고 싶음
-- 데이터 복사 X

CREATE TABLE EMP_TEMP
AS SELECT * FROM EMP WHERE 1 <> 1;
-- 조건이 false가 되기 때문에 행 셀렉션이 일어나지 않음
-- 열 이름만 가지고 올 수 있음

SELECT * FROM EMP_TEMP;

-- 데이터에 DATE형 실습
-- 년/월/일, 년-월-일
INSERT INTO EMP_TEMP (EMPNO, ENAME, JOB, HIREDATE)
VALUES (5555, '최은빈', 'PRESIDENT', '2021/12/10');

SELECT * FROM EMP_TEMP;

INSERT INTO EMP_TEMP (EMPNO, ENAME, JOB, HIREDATE)
VALUES (6666, '홍길동', 'DEVELOPER', '2021-12-10');

-- 1
INSERT INTO EMP_TEMP (EMPNO, ENAME, JOB, HIREDATE)
VALUES (7777, '홍길순', 'DEVELOPER', '10/12/2021');

-- 2
INSERT INTO EMP_TEMP (EMPNO, ENAME, JOB, HIREDATE)
VALUES (7777, '홍길순', 'DEVELOPER', '10-12-2021');

/* 1번 2번 가능할까요 ?
 * 오라클 설치 지역, 기본 언어 (날짜 표기 방법 => 한국식만 가능)
 * 
 */

INSERT INTO EMP_TEMP (EMPNO, ENAME, JOB, HIREDATE)
VALUES (7777, '홍길순', 'DEVELOPER', 
		TO_DATE('10-12-2021', 'DD-MM-YYYY'));
		-- 포맷 지정하면 미국식 날짜 가능!
		
SELECT * FROM EMP_TEMP;

INSERT INTO EMP_TEMP (EMPNO, ENAME, JOB, HIREDATE)
VALUES (8888, '홍길묵', 'SALESMAN', SYSDATE);
-- SYSDATE: 현재 시스템 시간으로 날짜 입력
-- 데이터가 언제 들어갔는지 확인하기 좋음

-- 데이터 일괄적으로 추가 (서브쿼리)
-- VALUES 부분을 서브쿼리로 대신
-- 열 개수, 자료형 일치

-- 사원 급여 등급이 2등급인 사원 정보 테이블 추가
-- EMP_TEST: EMP 복제
-- EMP + SALGRADE 조인
INSERT INTO EMP_TEMP (EMPNO, ENAME, JOB, HIREDATE, SAL)
SELECT E.EMPNO, E.ENAME, E.JOB, 
		E.HIREDATE, E.SAL
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
AND S.GRADE = 2;
-- 서브쿼리

SELECT * FROM EMP_TEMP;
SELECT * FROM EMP;

-- Q1. 'SMITH'보다 SAL를 많이 받고 있는 사원들 추가
SELECT * FROM TAB;

DROP TABLE EMP_TEMP_Q1;

CREATE TABLE EMP_TEMP_Q1
AS SELECT *
FROM EMP
WHERE 1 <> 1;

INSERT INTO EMP_TEMP_Q1
SELECT *
FROM EMP
WHERE SAL > (SELECT SAL 
			FROM EMP 
			WHERE ENAME = 'SMITH');

SELECT * FROM EMP_TEMP_Q1;

-- Q2. 30번 부서 평균 급여보다 적게 받고 있는 사원들 추가
DROP TABLE EMP_TEMP_Q2;

CREATE TABLE EMP_TEMP_Q2
AS SELECT *
FROM EMP
WHERE 1 <> 1;

INSERT INTO EMP_TEMP_Q2
SELECT *
FROM EMP
WHERE SAL < (SELECT AVG(SAL) 
			FROM EMP 
			WHERE DEPTNO = 30);

SELECT * FROM EMP_TEMP_Q2;

-- Q2-1. 30번 부서 사람들 중에 30번 부서 평균 급여보다 
-- 적게 받고 있는 사원들 추가
DROP TABLE EMP_TEMP_Q2_1;

CREATE TABLE EMP_TEMP_Q2_1
AS SELECT *
FROM EMP
WHERE 1 <> 1;

INSERT INTO EMP_TEMP_Q2_1
WITH
E30 AS (SELECT * FROM EMP WHERE DEPTNO = 30)
SELECT *
FROM E30
WHERE E30.SAL < (SELECT AVG(SAL) 
			FROM EMP 
			WHERE DEPTNO = 30);

SELECT * FROM EMP_TEMP_Q2_1;

-- Q3. 'KING'보다 입사일이 빠른 사원들 추가

DROP TABLE EMP_TEMP_Q3;

CREATE TABLE EMP_TEMP_Q3
AS SELECT *
FROM EMP
WHERE 1 <> 1;

INSERT INTO EMP_TEMP_Q3
SELECT *
FROM EMP
WHERE HIREDATE < (SELECT HIREDATE
			FROM EMP
			WHERE ENAME = 'KING');

SELECT * FROM EMP_TEMP_Q3;


-- Q4. 매니저 이름이 'BLAKE'인 사원들 추가

DROP TABLE EMP_TEMP_Q4;

CREATE TABLE EMP_TEMP_Q4
AS SELECT *
FROM EMP
WHERE 1 <> 1;

INSERT INTO EMP_TEMP_Q4
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, 
	E.HIREDATE, E.SAL, E.COMM, E.DEPTNO
FROM EMP E, EMP E2
WHERE E.MGR = E2.EMPNO
AND E2.ENAME = 'BLAKE';

INSERT INTO EMP_TEMP_Q4
SELECT *
FROM EMP 
WHERE MGR = (SELECT EMPNO 
			FROM EMP 
			WHERE ENAME = 'BLAKE');

SELECT * FROM EMP_TEMP_Q4;

-- Q5. 급여 등급이 1등급인 사원들 추가
DROP TABLE EMP_TEMP_Q5;

CREATE TABLE EMP_TEMP_Q5
AS SELECT *
FROM EMP
WHERE 1 <> 1;

-- 조인 테이블에서 데이터 가지고 와서 테이블 추가
INSERT INTO EMP_TEMP_Q5
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, 
	E.HIREDATE, E.SAL, E.COMM, E.DEPTNO
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
AND S.GRADE = 1

-- 조인하지 않은 테이블에서 (서브쿼리이용) 
-- 데이터 가지고 와서 테이블 추가
INSERT INTO EMP_TEMP_Q5
SELECT *
FROM EMP
WHERE SAL BETWEEN (SELECT LOSAL FROM SALGRADE WHERE GRADE = 1) 
AND (SELECT HISAL FROM SALGRADE WHERE GRADE = 1);

INSERT INTO EMP_TEMP_Q5
SELECT *
FROM EMP
WHERE SAL IN (SELECT SAL
			FROM EMP, SALGRADE
			WHERE SAL BETWEEN LOSAL AND HISAL
			AND GRADE = 1);


SELECT * FROM EMP_TEMP_Q5;

-- [데이터 수정]
-- DB 테이블에 저장된 테이터 변경 UPDATE

/* 형식)
 * UPDATE [테이블명]
 * SET [변경할 열1] = [데이터], [변경할 열2] = [데이터], ...
 * [WHERE 데이터 변경 대상 셀렉션 (옵션)]
 * 
 * WHERE절 생략
 * : 지정된 열의 모든 데이터 변경
 * 
 * */

SELECT * FROM TAB;
CREATE TABLE DEPT_TEMP2
AS SELECT * FROM DEPT;

SELECT * FROM DEPT_TEMP2;

UPDATE DEPT_TEMP2
SET LOC = 'SEOUL';
-- WHERE절이 생략

UPDATE DEPT_TEMP2
SET LOC = 'CHICAGO', DNAME = 'FACTORY'
WHERE DEPTNO = 40;


-- Q1. EMP_TEMP 테이블에서 사원 중 
-- 급여가 2500 이하인 사원만
-- 추가수당을 50으로 수정

SELECT * FROM EMP_TEMP;

DROP TABLE EMP_TEMP;

CREATE TABLE EMP_TEMP
AS SELECT * FROM EMP;

UPDATE EMP_TEMP
SET COMM = 50
WHERE SAL <= 2500;


-- 데이터 수정 (서브쿼리 이용)
SELECT * FROM DEPT;
SELECT * FROM DEPT_TEMP2;

UPDATE DEPT_TEMP2
SET (DNAME, LOC) = (SELECT DNAME, LOC -- 데이터 타입, 개수!
					FROM DEPT
					WHERE DEPTNO = 40)
WHERE DEPTNO = 40;

UPDATE DEPT_TEMP2
SET (DNAME) = (SELECT DNAME -- 데이터 타입, 개수!
				FROM DEPT
				WHERE DEPTNO = 40),
	(LOC) = (SELECT LOC -- 데이터 타입, 개수!
				FROM DEPT
				WHERE DEPTNO = 40)				
					
WHERE DEPTNO = 40;


-- [데이터 삭제]
/* 형식)
 * 
 * DELETE [FROM] [테이블 명]
 * [WHERE 삭제할 대상 셀렉션 조건식 (옵션)]
 * 
 * - WHERE절을 안쓰면 테이블 전체 데이터 삭제
 * - 특정 행 삭제하고 싶으면 WHERE절 추가!
 * */

SELECT * FROM EMP_TEMP2;

DROP TABLE EMP_TEMP2;

CREATE TABLE EMP_TEMP2
	AS SELECT * FROM EMP;

-- Q1. 이름에 M이 들어간 사원 삭제
DELETE FROM EMP_TEMP2
WHERE ENAME LIKE '%M%';


-- Q2. 급여 등급 3등급 (SALGRADE, EMP_TEMP2)인 
-- 사원 중에 30번 부서 사원 삭제
DELETE FROM EMP_TEMP2
WHERE EMPNO IN (SELECT E.EMPNO
				FROM EMP_TEMP2 E JOIN SALGRADE S
				ON (E.SAL BETWEEN S.LOSAL AND S.HISAL)
				WHERE S.GRADE = 3
				AND E.DEPTNO = 30);
SELECT *
FROM EMP_TEMP2 E JOIN SALGRADE S
ON (E.SAL BETWEEN S.LOSAL AND S.HISAL);

-- Q3. 추가 수당이 NULL인 사원 삭제
DELETE FROM EMP_TEMP2
WHERE COMM IS NULL;

-- Q4. 부서 근무지가 'NEW YORK'인 부서에서 일하는 사원 삭제
-- (DEPT, EMP_TEMP2)
DELETE FROM EMP_TEMP2
WHERE DEPTNO IN (SELECT D.DEPTNO
			FROM EMP_TEMP2 E JOIN DEPT D
			ON (E.DEPTNO = D.DEPTNO)
			WHERE D.LOC = 'NEW YORK');

SELECT *
FROM EMP_TEMP2 E JOIN DEPT D
ON (E.DEPTNO = D.DEPTNO) AND (D.LOC = 'NEW YORK');
-- 'NEW YORK' -> 부서 번호: 10
-- 'NEW YORK' -> 부서 번호: 20
-- 'NEW YORK' -> 부서 번호: 30

-- Q5. 부서별 가장 연봉이 높은 사람을 제외하고 사원 삭제
-- GROUP BY, MAX()
DELETE FROM EMP_TEMP2
WHERE SAL NOT IN (SELECT MAX(SAL)
				FROM EMP_TEMP2 E
				GROUP BY E.DEPTNO);
-- SAL != 10번 부서 최대 연봉 AND
-- SAL != 20번 부서 최대 연봉 AND
-- SAL != 30번 부서 최대 연봉




SELECT * FROM DEPT;
SELECT * FROM EMP;
	
	